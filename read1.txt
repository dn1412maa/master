from __future__ import print_function
import boto3
import base64
from urllib2 import Request, urlopen, HTTPError
from datetime import datetime, timedelta

awsRegion = 'us-west-2'
event_datetime = datetime.strftime(
    datetime.now()+timedelta(days=-1), '%Y-%m-%d')
print('Loading function ' + datetime.now().time().isoformat())


def send_alert_to_jira(description):
    """
    Function sends message to Jira.
    """
    jiraIssueKey = 'PROJ'
    jiraUrl = 'http://10.0.0.0:8080/rest/api/2/issue/'
    jiraUsername = 'xxxx'
    jiraPassword = 'xxxx'
    base64string = base64.encodestring('%s:%s' % (jiraUsername, jiraPassword)).replace('\n', '')
    jiraHeaders = {
        "content-type": "application/json",
        "Authorization": "Basic %s" % base64string
        }

    jiraReqBody = {
            'fields': {
                'project': {
                    'key': jiraIssueKey
                },
                'summary': 'RDS Snapshot was not found',
                'description': ("\n".join(map(str, description))),
                'issuetype': {
                    'name': 'Task'
                },
            }
        }

    try:
        request = Request(jiraUrl, headers=jiraHeaders, data=json.dumps(jiraReqBody))
        responce = urlopen(request)
    except HTTPError as e:
        print("Exception during sending alert to Jira: {0}".format(str(e)))


def check_snaphot_presence(dbInstanceIdentifier):
    client = boto3.client('rds', region_name=awsRegion)
    paginator = client.get_paginator('describe_db_snapshots')
    operation_parameters = {'DBInstanceIdentifier': dbInstanceIdentifier,
                            'SnapshotType': 'manual'}
    page_iterator = paginator.paginate(**operation_parameters)
    for page in page_iterator:
        for snapshot in page['DBSnapshots']:
            if snapshot['Status'] == 'available':
                if datetime.strftime(snapshot['SnapshotCreateTime'], '%Y-%m-%d') >= event_datetime:
                    return True
        return False


def lambda_handler(event, context):
    envs = {
        'xxxxx': 'HC-DevOps',
        'xxxxx': 'HC-Prod',
        'xxxxx': 'Test'
        }
    send_results = []
    uncheck_db = []

    client = boto3.client('rds', region_name=awsRegion)
    paginator = client.get_paginator('describe_db_instances')
    for response_iterator in paginator.paginate():
        for db_instance in response_iterator['DBInstances']:
            db_instance_identifier = db_instance['DBInstanceIdentifier']
            if db_instance_identifier not in uncheck_db:
                if not check_snaphot_presence(db_instance_identifier):
                    send_results.append('The db-instance "' + db_instance_identifier + '" snapshot was not found on ' + event_datetime)

    if len(send_results):
        send_results.insert(0, ('Region name: ' + awsRegion))
        aws_account_id = context.invoked_function_arn.split(":")[4]
        send_results.insert(0, (envs.get(aws_account_id, 'Unknown AWS account id: ' + aws_account_id)))
        print("\n".join(map(str, send_results)))
        send_alert_to_jira(send_results)

    return send_results
    
