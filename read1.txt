from __future__ import print_function
import botocore.session
import boto3
import re
from datetime import datetime, timedelta

awsRegion = 'us-west-2'
event_datetime = datetime.strftime(datetime.now()+timedelta(days=-1), '%Y-%m-%d')
print('Loading function ' + datetime.now().time().isoformat())


def check_being_snapshot(dbInstanceIdentifier):
    client = boto3.client('rds', region_name=awsRegion)
    paginator = client.get_paginator('describe_db_snapshots')
    operation_parameters = {'DBInstanceIdentifier': dbInstanceIdentifier,
                            'SnapshotType': 'manual'}
    page_iterator = paginator.paginate(**operation_parameters)
    for page in page_iterator:
        for snapshot in page['DBSnapshots']:
            if snapshot['Status'] == 'available':
                if datetime.strftime(snapshot['SnapshotCreateTime'], '%Y-%m-%d') >= event_datetime:
                    return True
        return False


def lambda_handler(event, context):
    envs = {
        'xxxxx': 'HC-DevOps',
        'xxxxx': 'HC-Prod',
        'xxxxx': 'Test'
        }
    send_results = []
    uncheck_db = []

    aws_account_id = context.invoked_function_arn.split(":")[4]
    client = boto3.client('rds', region_name=awsRegion)
    paginator = client.get_paginator('describe_db_instances')
    for response_iterator in paginator.paginate():
        for db_instance in response_iterator['DBInstances']:
            db_instance_identifier = db_instance['DBInstanceIdentifier']
            if db_instance_identifier not in uncheck_db:
                if not check_being_snapshot(db_instance_identifier):
                    send_results.append('The db-instance "' + db_instance_identifier + '" snapshot was not found on ' + event_datetime)

    if len(send_results):
        send_results.insert(0, ('Region name: ' + awsRegion))
        send_results.insert(0, (envs.get(aws_account_id, 'Unknown AWS account id: ' + aws_account_id)))
        print('Send to Jira')
        print("\n".join(map(str, send_results)))

    return send_results
    
